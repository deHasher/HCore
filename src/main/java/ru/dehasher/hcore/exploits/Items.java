package ru.dehasher.hcore.exploits;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCreativeEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.event.player.PlayerDropItemEvent;

import ru.dehasher.hcore.HCore;
import ru.dehasher.hcore.managers.Methods;

public class Items implements Listener {
    public Items(HCore plugin) {}

    // Починка предмета.
    private static ItemStack fixItem(ItemStack item) {
        ItemMeta meta = item.getItemMeta();
		meta.setDisplayName(Methods.color(HCore.lang.getString("messages.bad-item.name")));

		List<String> lore = new ArrayList<>();
		for (String str : HCore.lang.getStringList("messages.bad-item.lore")) {
			lore.add(Methods.color(str));
		}
		meta.setLore(lore);

		item.setItemMeta(meta);
		item.setType(Material.DIRT);
		return item;
    }

	// Проверка на краш шалкер.
    private static boolean isBadShulker(ShulkerBox shulker) {
		int length = 0;

		Inventory inv = shulker.getInventory();
		if (inv == null) return false;

		for (int i = 0; i < 26; i++) {
			ItemStack item = inv.getItem(i);

			if (item == null) continue;
			if (!item.hasItemMeta()) continue;

			if (HCore.config.getBoolean("settings.fix-exploits.items.shulker.block-nested")) {
				if (item.getType().name().endsWith("_SHULKER_BOX")) return true;
			}

			if (HCore.config.getBoolean("settings.fix-exploits.items.shulker.block-books")) {
				String[] books = {"WRITTEN_BOOK", "WRITTABLE_BOOK", "BOOK_AND_QUILL"};
				for (String book : books) {
					if (item.getType().name().equals(book)) return true;
				}
			}

			length += Methods.checkBytes(item);
		}

		if (length > HCore.config.getInt("settings.fix-exploits.items.shulker.limit-bytes")) {
			return true;
		}

		return false;
	}

    private static boolean isBadItem(ItemStack item) {
        Material item_type = item.getType();
        if (item_type == Material.AIR) return false;
    	if (!item.hasItemMeta()) return false;

        ItemMeta meta = item.getItemMeta();

		if (HCore.config.getBoolean("settings.fix-exploits.items.enabled")) {
			if (Methods.checkBytes(item) > HCore.config.getInt("settings.fix-exploits.items.limit-bytes")) {
				return true;
			}
		}

		if (isItemAdv(item)) return true;

    	if (item_type.name().endsWith("_SHULKER_BOX")) {
    		if (item.getData() != null) {
    			BlockStateMeta shulker_meta = (BlockStateMeta) meta;
    			ShulkerBox shulker = (ShulkerBox) shulker_meta.getBlockState();
    			if (isBadShulker(shulker)) return true;
    		}
    	}

		return false;
    }

	// Проверка на рекламу в предмете.
    private static boolean isItemAdv(ItemStack item) {
		if (item == null)        return false;
		if (!item.hasItemMeta()) return false;

		if (!HCore.config.getBoolean("settings.fix-advertisement.checks.items")) return false;

		ItemMeta meta = item.getItemMeta();

		if (meta.hasDisplayName()) {
			if (Methods.isAdv(meta.getDisplayName())) return true;
		}

		if (meta.hasLore()) {
			for (String row : meta.getLore()) {
				if (Methods.isAdv(row)) return true;
			}
		}

		return false;
	}

	// Обрабатывает только дроп.
	@EventHandler(priority = EventPriority.HIGHEST)
	private void onEntityPickupItemEvent(EntityPickupItemEvent e) {
    	if (!(e.getEntity() instanceof Player)) return;
    	ItemStack item = e.getItem().getItemStack();
    	if (isBadItem(item)) fixItem(item);
	}

	// Обрабатывает только взаимодействие.
	@EventHandler(priority = EventPriority.HIGHEST)
    private void onPlayerInteractEvent(PlayerInteractEvent e) {
		if (!e.hasItem()) return;
    	ItemStack item = e.getItem();
    	if (isBadItem(item)) fixItem(item);
	}
	
	// Обрабатывает предметы попавшие в инвентарь.
	@EventHandler(priority = EventPriority.HIGHEST)
	private void onInventoryClickEvent(InventoryClickEvent e) {
	   	ItemStack item = e.getCursor();
    	if (isBadItem(item)) fixItem(item);
   	}

	// Обрабатывает креатив режим.
	@EventHandler(priority = EventPriority.HIGHEST)
	private void onInventoryCreativeEvent(InventoryCreativeEvent e) {
	   	ItemStack item = e.getCursor();
    	if (isBadItem(item)) fixItem(item);
  	}

	// Обрабатывает все дропы предметов.
	@EventHandler(priority = EventPriority.HIGHEST)
	private void PlayerDropItemEvent(PlayerDropItemEvent e) {
	   	ItemStack item = e.getItemDrop().getItemStack();
    	if (isBadItem(item)) fixItem(item);
  	}
}
